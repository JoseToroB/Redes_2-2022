from scipy.io.wavfile import read, write
from scipy.fftpack import fft, fftfreq, ifft
from scipy.signal import butter, resample, filtfilt
import matplotlib.pyplot as plt
import numpy as np
#1 crear los audios "jose toro.wav" y "cristhofer_parada.wav"
#2 Lea las señales de audio generadas y determine a qué corresponde cada uno de los parámetros retornados.

frequencyA, signalA = read("cristhofer_parada.wav") #signalA for cristhofer
frequencyB, signalB = read("jose toro.wav") #signalB for jose
'''
The audio signals generated by the read function are two,
1. the sampling rate,
2. Array of ints, representing the signal.
'''
#3 Grafique las señales de audio en el tiempo

amplitudA=len(signalA)
duracionA= amplitudA
#4 Calcule la transformada de Fourier de las señales de audio:
    #a. Grafique la señal en el dominio de la frecuencia.
    #b. Al resultado del punto 4, calcule la transformada de Fourier inversa.
    #c. Compare con la señal leída en el punto 1.
#5 Calcule y grafique el espectrograma de cada una de las señales. El espectrograma
    #permite visualizar información en el dominio de la frecuencia y del tiempo a la vez.

#7 señal ruidosa
    #a. repetir 3,4y5 con la señal ruidosa

#8 A continuación se tratará de filtrar el ruido de la señal ruidosa, para ello:
    #a. Diseñe un filtro FIR o IIR para eliminar el ruido de la señal de audio.
    #Determine el tipo de filtro (pasa bajos, pasa altos, o pasa banda) y determine
    #las frecuencias de corte para este de acuerdo a su análisis en el punto 7
    #b. Pruebe distintos parámetros al momento de aplicar el filtro y explique por qué
    #eligió esos parámetros y cómo afectan el resultado.
    #c. Obtenga la transformada de Fourier, el espectrograma de la señal filtrada y
    #analice sus resultados.
