from scipy.io.wavfile import read, write
from scipy.fftpack import fft, fftfreq, ifft
from scipy.signal import butter, resample, filtfilt
import matplotlib.pyplot as mplt
import numpy as np


def graph_spectrogram(title, x, y, label_x, label_y):
    mplt.figure(title)
    mplt.specgram(x, Fs=y)
    mplt.title(title)
    mplt.xlabel(label_x)
    mplt.ylabel(label_y)
    mplt.show()


def graph(title, color, x, y, label_x, label_y):
    mplt.figure(title)
    mplt.plot(x, y, color)
    mplt.title(title)
    mplt.xlabel(label_x)
    mplt.ylabel(label_y)
    mplt.show()
    return


# 1 crear los audios "jose toro.wav" y "cristhofer_parada.wav"
# 2 Lea las señales de audio generadas y determine a qué corresponde cada uno de los parámetros retornados.

frequencyA, signalA = read("cristhofer_parada.wav")  # signalA for cristhofer
frequencyB, signalB = read("jose toro.wav")  # signalB for jose
'''
The audio signals generated by the read function are two,
1. the sampling rate,
2. Array of ints, representing the signal.
'''
# 3 Grafique las señales de audio en el tiempo
time_str = "Tiempo [s]"
amplitude_str = "Amplitud [dB]"
frequency_str = "Frecuencia [Hz]"
# the amplitude and the duration are calculated.
amplitudeA = len(signalA)
durationA = amplitudeA / frequencyA  # d = A/f
timeA = np.linspace(0, durationA, amplitudeA)
graph("Audio 1: Cristhofer Parada", "red", timeA, signalA, time_str, amplitude_str)

# the same steps are repeated for the next .wav file
amplitudeB = len(signalB)
durationB = amplitudeB / frequencyB  # d = A/f
timeB = np.linspace(0, durationB, amplitudeB)
graph("Audio 1: Jose Toro", "blue", timeB, signalB, time_str, amplitude_str)

# 4 Calcule la transformada de Fourier de las señales de audio:

# fft and fftfreq from scipy library are used to calculate fourier derivative, and it's frequency
# for both signals
fourierA = fft(signalA)
frequencyFourierA = fftfreq(amplitudeA)

fourierB = fft(signalB)
frequencyFourierB = fftfreq(amplitudeB)

# a. Grafique la señal en el dominio de la frecuencia.

str1 = "Transformada de fourier para el audio 1: Cristhofer Parada"
graph(str1, "red", frequencyFourierA, abs(fourierA), frequency_str,amplitude_str)
str2 = "Transformada de fourier para el audio 2: Jose Toro"
graph(str2, "blue", frequencyFourierB, abs(fourierB), frequency_str,amplitude_str)

# b. Al resultado del punto 4, calcule la transformada de Fourier inversa.
inverseFourierA = ifft(fourierA).real
inverseFourierB = ifft(fourierB).real

# c. Compare con la señal leída en el punto 1.
str1 = "Transformada inversa de fourier para el audio 1: Cristhofer Parada"
str2 = "Transformada inversa de fourier para el audio 2: Jose Toro"
graph(str1, "red", frequencyFourierA, inverseFourierA, time_str, amplitude_str)
graph(str2, "blue", frequencyFourierA, inverseFourierB, time_str, amplitude_str)

# 5 Calcule y grafique el espectrograma de cada una de las señales. El espectrograma
# permite visualizar información en el dominio de la frecuencia y del tiempo a la vez.
# graph_spectrogram(title, x, y, label_x, label_y):
str1 = "Espectrograma de audio 1: Cristhofer Parada"
str2 = "Espectrograma de audio 2: Jose Toro"
graph_spectrogram(str1, signalA, frequencyA, time_str, frequency_str)
graph_spectrogram(str2, signalB, frequencyB, time_str, frequency_str)

# 7 señal ruido rosa
pink_frequency, pink_signal = read("Ruido Rosa.wav")

# pink_signal is added to cristhofer's signal in order to make it noisy
noisy_signal 

# a. repetir 3,4y5 con la señal ruidosa

# 8 A continuación se tratará de filtrar el ruido de la señal ruidosa, para ello:
# a. Diseñe un filtro FIR o IIR para eliminar el ruido de la señal de audio.
# Determine el tipo de filtro (pasa bajos, pasa altos, o pasa banda) y determine
# las frecuencias de corte para este de acuerdo a su análisis en el punto 7
# b. Pruebe distintos parámetros al momento de aplicar el filtro y explique por qué
# eligió esos parámetros y cómo afectan el resultado.
# c. Obtenga la transformada de Fourier, el espectrograma de la señal filtrada y
# analice sus resultados.
